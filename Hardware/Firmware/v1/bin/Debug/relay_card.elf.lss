
bin/Debug/relay_card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000002da  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000ea0  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000899  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea ed       	ldi	r30, 0xDA	; 218
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	aa 3a       	cpi	r26, 0xAA	; 170
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>
  44:	d6 d0       	rcall	.+428    	; 0x1f2 <main>
  46:	47 c1       	rjmp	.+654    	; 0x2d6 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <USART_init>:
#include "config.h"

void USART_init (unsigned int ubrr)
{
    //ustawienie predkosci transmisji
    UBRRH = (unsigned char)(ubrr>>8);
  4a:	92 b9       	out	0x02, r25	; 2
    UBRRL = (unsigned char)ubrr;
  4c:	89 b9       	out	0x09, r24	; 9

    //wlaczenie odbioru i wysylania
    UCSRB = (1<<RXEN)|(1<<TXEN);
  4e:	88 e1       	ldi	r24, 0x18	; 24
  50:	8a b9       	out	0x0a, r24	; 10

    //format ramki: bit startu, 8 bit danych, 2 bity stopu
    UCSRC = (1<<USBS)|(3<<UCSZ0);
  52:	8e e0       	ldi	r24, 0x0E	; 14
  54:	83 b9       	out	0x03, r24	; 3

     //wylaczenie U2X
   // UCSRA &= ~(1<<U2X);
}
  56:	08 95       	ret

00000058 <USART_transmit>:

//funckcja wysylajaca odpowiedzi
void USART_transmit(char *data)
{
  58:	cf 93       	push	r28
  5a:	df 93       	push	r29
  5c:	fc 01       	movw	r30, r24
    int i=0;
    while (data[i] != '\0')
  5e:	90 81       	ld	r25, Z
  60:	99 23       	and	r25, r25
  62:	61 f0       	breq	.+24     	; 0x7c <USART_transmit+0x24>
    {
        //czekanie na oproznienie bufora
        while ( !( UCSRA & (1<<UDRE)) ) ;
  64:	ab e2       	ldi	r26, 0x2B	; 43
  66:	b0 e0       	ldi	r27, 0x00	; 0

        //umieszczenie danych w buforze i ich wysylanie
        UDR = data[i];
  68:	cc e2       	ldi	r28, 0x2C	; 44
  6a:	d0 e0       	ldi	r29, 0x00	; 0
{
    int i=0;
    while (data[i] != '\0')
    {
        //czekanie na oproznienie bufora
        while ( !( UCSRA & (1<<UDRE)) ) ;
  6c:	8c 91       	ld	r24, X
  6e:	85 ff       	sbrs	r24, 5
  70:	fd cf       	rjmp	.-6      	; 0x6c <USART_transmit+0x14>

        //umieszczenie danych w buforze i ich wysylanie
        UDR = data[i];
  72:	98 83       	st	Y, r25

//funckcja wysylajaca odpowiedzi
void USART_transmit(char *data)
{
    int i=0;
    while (data[i] != '\0')
  74:	91 81       	ldd	r25, Z+1	; 0x01
  76:	31 96       	adiw	r30, 0x01	; 1
  78:	99 23       	and	r25, r25
  7a:	c1 f7       	brne	.-16     	; 0x6c <USART_transmit+0x14>
        UDR = data[i];
        i++;

    }

}
  7c:	df 91       	pop	r29
  7e:	cf 91       	pop	r28
  80:	08 95       	ret

00000082 <USART_receive>:

//funckcja odbierajaca pojedyncze znaki przez USART
char USART_receive(void)
{
    //czeksnie na przyjscie danych
    while ( !(UCSRA & (1<<RXC)) ) ;
  82:	eb e2       	ldi	r30, 0x2B	; 43
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	88 23       	and	r24, r24
  8a:	ec f7       	brge	.-6      	; 0x86 <USART_receive+0x4>

    //wysylanie danych z bufora
    return UDR;
  8c:	8c b1       	in	r24, 0x0c	; 12
}
  8e:	08 95       	ret

00000090 <frame_is_ok>:
//sprawdzenie czy format bramki jest dobry
//funckja zwraca
//1 - dobra ramka
//0 - zla ramka
int frame_is_ok(char *command, int char_counter)
{
  90:	fc 01       	movw	r30, r24
  if (command[0] == FRAME_START && command[char_counter] == FRAME_STOP) return 1;
  92:	80 81       	ld	r24, Z
  94:	82 35       	cpi	r24, 0x52	; 82
  96:	19 f0       	breq	.+6      	; 0x9e <frame_is_ok+0xe>
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	0b c0       	rjmp	.+22     	; 0xb4 <frame_is_ok+0x24>
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	e6 0f       	add	r30, r22
  a2:	f7 1f       	adc	r31, r23
  a4:	80 81       	ld	r24, Z
  a6:	8e 36       	cpi	r24, 0x6E	; 110
  a8:	09 f0       	breq	.+2      	; 0xac <frame_is_ok+0x1c>
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	89 27       	eor	r24, r25
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
  else return 0;
}
  b4:	82 2f       	mov	r24, r18
  b6:	93 2f       	mov	r25, r19
  b8:	08 95       	ret

000000ba <relay_set>:

//ustawia przekaznik
void relay_set(char *command)
{
  ba:	af 92       	push	r10
  bc:	bf 92       	push	r11
  be:	cf 92       	push	r12
  c0:	df 92       	push	r13
  c2:	ef 92       	push	r14
  c4:	ff 92       	push	r15
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	7c 01       	movw	r14, r24
    //status mowi o stanie wykonania operacji
    //1- operacja wykonan bez problemu
    //0- wystapily bledy
    int status = 1;

    while (command[i] != 'n' && i < 8)
  d0:	dc 01       	movw	r26, r24
  d2:	12 96       	adiw	r26, 0x02	; 2
  d4:	ec 91       	ld	r30, X
  d6:	ee 36       	cpi	r30, 0x6E	; 110
  d8:	b1 f1       	breq	.+108    	; 0x146 <__stack+0x67>
  da:	c2 e0       	ldi	r28, 0x02	; 2
  dc:	d0 e0       	ldi	r29, 0x00	; 0
        }

        //jesli arguement funkcji jest inny niz 1 lub 0 jest zwracany blad
        else
        {
            USART_transmit(ERROR_BAD_ARGUMENT);
  de:	0f 2e       	mov	r0, r31
  e0:	f0 e6       	ldi	r31, 0x60	; 96
  e2:	af 2e       	mov	r10, r31
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	bf 2e       	mov	r11, r31
  e8:	f0 2d       	mov	r31, r0
        }

        //jesli bit komendy wynosi 1 to przekaznik jest wlaczany
        else if (command[i] == '1')
        {
            PORTB |= (1<<i);
  ea:	08 e3       	ldi	r16, 0x38	; 56
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	cc 24       	eor	r12, r12
  f0:	dd 24       	eor	r13, r13
  f2:	c3 94       	inc	r12
    int status = 1;

    while (command[i] != 'n' && i < 8)
    {
        //jesli bit komendy wynosi 0 to przekaznik jest wylaczany
        if (command[i] == '0')
  f4:	e0 33       	cpi	r30, 0x30	; 48
  f6:	69 f4       	brne	.+26     	; 0x112 <__stack+0x33>
        {
            PORTB &= ~(1<<i);
  f8:	f8 01       	movw	r30, r16
  fa:	20 81       	ld	r18, Z
  fc:	c6 01       	movw	r24, r12
  fe:	0c 2e       	mov	r0, r28
 100:	02 c0       	rjmp	.+4      	; 0x106 <__stack+0x27>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <__stack+0x23>
 10a:	80 95       	com	r24
 10c:	82 23       	and	r24, r18
 10e:	80 83       	st	Z, r24
 110:	10 c0       	rjmp	.+32     	; 0x132 <__stack+0x53>
           // i++;
        }

        //jesli bit komendy wynosi 1 to przekaznik jest wlaczany
        else if (command[i] == '1')
 112:	e1 33       	cpi	r30, 0x31	; 49
 114:	61 f4       	brne	.+24     	; 0x12e <__stack+0x4f>
        {
            PORTB |= (1<<i);
 116:	d8 01       	movw	r26, r16
 118:	2c 91       	ld	r18, X
 11a:	c6 01       	movw	r24, r12
 11c:	0c 2e       	mov	r0, r28
 11e:	02 c0       	rjmp	.+4      	; 0x124 <__stack+0x45>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <__stack+0x41>
 128:	28 2b       	or	r18, r24
 12a:	2c 93       	st	X, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <__stack+0x53>
        }

        //jesli arguement funkcji jest inny niz 1 lub 0 jest zwracany blad
        else
        {
            USART_transmit(ERROR_BAD_ARGUMENT);
 12e:	c5 01       	movw	r24, r10
 130:	93 df       	rcall	.-218    	; 0x58 <USART_transmit>
            status = 0;
            //i++;
        }

       i++;
 132:	21 96       	adiw	r28, 0x01	; 1
    //status mowi o stanie wykonania operacji
    //1- operacja wykonan bez problemu
    //0- wystapily bledy
    int status = 1;

    while (command[i] != 'n' && i < 8)
 134:	f7 01       	movw	r30, r14
 136:	ec 0f       	add	r30, r28
 138:	fd 1f       	adc	r31, r29
 13a:	e0 81       	ld	r30, Z
 13c:	ee 36       	cpi	r30, 0x6E	; 110
 13e:	19 f0       	breq	.+6      	; 0x146 <__stack+0x67>
 140:	c8 30       	cpi	r28, 0x08	; 8
 142:	d1 05       	cpc	r29, r1
 144:	b9 f6       	brne	.-82     	; 0xf4 <__stack+0x15>
    else
    {
        USART_transmit(INFO_COMMAND_EXECUTE_WITH_ERRORS);
    }*/

}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	df 90       	pop	r13
 154:	cf 90       	pop	r12
 156:	bf 90       	pop	r11
 158:	af 90       	pop	r10
 15a:	08 95       	ret

0000015c <relay_status>:

//sprawdza stan przekaznikow i wysyla do komputera
void relay_status(void)
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	2a 97       	sbiw	r28, 0x0a	; 10
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
    //i - numer pinu
    int i = 2;
    //j - indeks tablicy. [0] jest zajete przez znak poczatku ramki
    int j = 1;
    //tablica zawierajaca komunikat do wyslania
    char relay_status_tab[10] = "Rtest";
 170:	de 01       	movw	r26, r28
 172:	11 96       	adiw	r26, 0x01	; 1
 174:	eb e6       	ldi	r30, 0x6B	; 107
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	01 90       	ld	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	e1 f7       	brne	.-8      	; 0x17a <relay_status+0x1e>
 182:	1f 82       	std	Y+7, r1	; 0x07
 184:	18 86       	std	Y+8, r1	; 0x08
 186:	19 86       	std	Y+9, r1	; 0x09
 188:	1a 86       	std	Y+10, r1	; 0x0a
 18a:	fe 01       	movw	r30, r28
 18c:	32 96       	adiw	r30, 0x02	; 2
 18e:	22 e0       	ldi	r18, 0x02	; 2
 190:	30 e0       	ldi	r19, 0x00	; 0

    while (i < 8)
    {
        if ( PORTB & (1 << i) )
 192:	a8 e3       	ldi	r26, 0x38	; 56
 194:	b0 e0       	ldi	r27, 0x00	; 0
            relay_status_tab[j] = '1';
        }

        else if ( !(PORTB & (1 << i)) )
        {
            relay_status_tab[j] = '0';
 196:	50 e3       	ldi	r21, 0x30	; 48

    while (i < 8)
    {
        if ( PORTB & (1 << i) )
        {
            relay_status_tab[j] = '1';
 198:	41 e3       	ldi	r20, 0x31	; 49
    //tablica zawierajaca komunikat do wyslania
    char relay_status_tab[10] = "Rtest";

    while (i < 8)
    {
        if ( PORTB & (1 << i) )
 19a:	8c 91       	ld	r24, X
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 2e       	mov	r0, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <relay_status+0x4a>
 1a2:	95 95       	asr	r25
 1a4:	87 95       	ror	r24
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <relay_status+0x46>
 1aa:	80 ff       	sbrs	r24, 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <relay_status+0x56>
        {
            relay_status_tab[j] = '1';
 1ae:	40 83       	st	Z, r20
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <relay_status+0x6a>
        }

        else if ( !(PORTB & (1 << i)) )
 1b2:	8c 91       	ld	r24, X
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 2e       	mov	r0, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <relay_status+0x62>
 1ba:	95 95       	asr	r25
 1bc:	87 95       	ror	r24
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <relay_status+0x5e>
 1c2:	80 ff       	sbrs	r24, 0
        {
            relay_status_tab[j] = '0';
 1c4:	50 83       	st	Z, r21
        }

       i++;
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ca:	31 96       	adiw	r30, 0x01	; 1
    //j - indeks tablicy. [0] jest zajete przez znak poczatku ramki
    int j = 1;
    //tablica zawierajaca komunikat do wyslania
    char relay_status_tab[10] = "Rtest";

    while (i < 8)
 1cc:	28 30       	cpi	r18, 0x08	; 8
 1ce:	31 05       	cpc	r19, r1
 1d0:	21 f7       	brne	.-56     	; 0x19a <relay_status+0x3e>
       i++;
       j++;
    }

    //konczenie formowania komunikatu. Dodawanie kona ramki
    relay_status_tab[7] = '\n';
 1d2:	8a e0       	ldi	r24, 0x0A	; 10
 1d4:	88 87       	std	Y+8, r24	; 0x08
    relay_status_tab[8] = '\r';
 1d6:	8d e0       	ldi	r24, 0x0D	; 13
 1d8:	89 87       	std	Y+9, r24	; 0x09

    //wysylanie informacji o aktualnym stanie przekaznikow
    USART_transmit(relay_status_tab);
 1da:	ce 01       	movw	r24, r28
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	3c df       	rcall	.-392    	; 0x58 <USART_transmit>

}
 1e0:	2a 96       	adiw	r28, 0x0a	; 10
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	cf 91       	pop	r28
 1ee:	df 91       	pop	r29
 1f0:	08 95       	ret

000001f2 <main>:


int main()
{
 1f2:	6f 92       	push	r6
 1f4:	7f 92       	push	r7
 1f6:	8f 92       	push	r8
 1f8:	9f 92       	push	r9
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	df 93       	push	r29
 20c:	cf 93       	push	r28
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	2a 97       	sbiw	r28, 0x0a	; 10
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b11111111;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b0000000;
 222:	18 ba       	out	0x18, r1	; 24

	USART_init(MYUBRR);
 224:	80 e4       	ldi	r24, 0x40	; 64
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	10 df       	rcall	.-480    	; 0x4a <USART_init>
	int char_counter = 0;
    char command[10] = "test";
 22a:	de 01       	movw	r26, r28
 22c:	11 96       	adiw	r26, 0x01	; 1
 22e:	ef e9       	ldi	r30, 0x9F	; 159
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	01 90       	ld	r0, Z+
 236:	0d 92       	st	X+, r0
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x42>
 23c:	fe 01       	movw	r30, r28
 23e:	36 96       	adiw	r30, 0x06	; 6
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	df 01       	movw	r26, r30
 244:	1d 92       	st	X+, r1
 246:	8a 95       	dec	r24
 248:	e9 f7       	brne	.-6      	; 0x244 <main+0x52>
 24a:	00 e0       	ldi	r16, 0x00	; 0
 24c:	10 e0       	ldi	r17, 0x00	; 0
		char_counter = 0;

        //odbieranie znakow az do wystopienia znaku FRAME_STOP
		while (char_counter < 9)
		{
		    command[char_counter] = USART_receive();
 24e:	7e 01       	movw	r14, r28
 250:	08 94       	sec
 252:	e1 1c       	adc	r14, r1
 254:	f1 1c       	adc	r15, r1
                USART_transmit(ERROR_UNKNOWN_COMMAND);
                break;
            }
        }

        else USART_transmit(ERROR_BAD_FRAME);
 256:	0f 2e       	mov	r0, r31
 258:	f4 e9       	ldi	r31, 0x94	; 148
 25a:	af 2e       	mov	r10, r31
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	bf 2e       	mov	r11, r31
 260:	f0 2d       	mov	r31, r0
 262:	cc 24       	eor	r12, r12
 264:	dd 24       	eor	r13, r13
                relay_status();
                break;


                default:
                USART_transmit(ERROR_UNKNOWN_COMMAND);
 266:	0f 2e       	mov	r0, r31
 268:	f9 e8       	ldi	r31, 0x89	; 137
 26a:	8f 2e       	mov	r8, r31
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	9f 2e       	mov	r9, r31
 270:	f0 2d       	mov	r31, r0
        if (frame_is_ok(command, char_counter))
        {
            switch (command[1])
            {
                case 'D':
                USART_transmit(DEVICE_ID);
 272:	0f 2e       	mov	r0, r31
 274:	f5 e7       	ldi	r31, 0x75	; 117
 276:	6f 2e       	mov	r6, r31
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	7f 2e       	mov	r7, r31
 27c:	f0 2d       	mov	r31, r0
 27e:	09 c0       	rjmp	.+18     	; 0x292 <main+0xa0>
		char_counter = 0;

        //odbieranie znakow az do wystopienia znaku FRAME_STOP
		while (char_counter < 9)
		{
		    command[char_counter] = USART_receive();
 280:	00 df       	rcall	.-512    	; 0x82 <USART_receive>
 282:	f7 01       	movw	r30, r14
 284:	e0 0f       	add	r30, r16
 286:	f1 1f       	adc	r31, r17
 288:	80 83       	st	Z, r24

		    if (command[char_counter] == FRAME_STOP) break;
 28a:	8e 36       	cpi	r24, 0x6E	; 110
 28c:	29 f0       	breq	.+10     	; 0x298 <main+0xa6>
		    else ;

		    char_counter++;
 28e:	0f 5f       	subi	r16, 0xFF	; 255
 290:	1f 4f       	sbci	r17, 0xFF	; 255
	while (1)
	{
		char_counter = 0;

        //odbieranie znakow az do wystopienia znaku FRAME_STOP
		while (char_counter < 9)
 292:	09 30       	cpi	r16, 0x09	; 9
 294:	11 05       	cpc	r17, r1
 296:	a4 f3       	brlt	.-24     	; 0x280 <main+0x8e>

		    char_counter++;
		}

        //sprawdzanie formatu ramki. Na poczatku musi byc FRAME_START
        if (frame_is_ok(command, char_counter))
 298:	c7 01       	movw	r24, r14
 29a:	b8 01       	movw	r22, r16
 29c:	f9 de       	rcall	.-526    	; 0x90 <frame_is_ok>
 29e:	89 2b       	or	r24, r25
 2a0:	b1 f0       	breq	.+44     	; 0x2ce <main+0xdc>
        {
            switch (command[1])
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	89 34       	cpi	r24, 0x49	; 73
 2a6:	61 f0       	breq	.+24     	; 0x2c0 <main+0xce>
 2a8:	83 35       	cpi	r24, 0x53	; 83
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <main+0xc6>
 2ac:	84 34       	cpi	r24, 0x44	; 68
 2ae:	59 f4       	brne	.+22     	; 0x2c6 <main+0xd4>
            {
                case 'D':
                USART_transmit(DEVICE_ID);
 2b0:	c3 01       	movw	r24, r6
 2b2:	d2 de       	rcall	.-604    	; 0x58 <USART_transmit>
 2b4:	86 01       	movw	r16, r12
 2b6:	ed cf       	rjmp	.-38     	; 0x292 <main+0xa0>
                break;

                case 'S':
                relay_set(command);
 2b8:	c7 01       	movw	r24, r14
 2ba:	ff de       	rcall	.-514    	; 0xba <relay_set>
 2bc:	86 01       	movw	r16, r12
 2be:	e9 cf       	rjmp	.-46     	; 0x292 <main+0xa0>
                break;

                case 'I':
                relay_status();
 2c0:	4d df       	rcall	.-358    	; 0x15c <relay_status>
 2c2:	86 01       	movw	r16, r12
 2c4:	e6 cf       	rjmp	.-52     	; 0x292 <main+0xa0>
                break;


                default:
                USART_transmit(ERROR_UNKNOWN_COMMAND);
 2c6:	c4 01       	movw	r24, r8
 2c8:	c7 de       	rcall	.-626    	; 0x58 <USART_transmit>
 2ca:	86 01       	movw	r16, r12
 2cc:	e2 cf       	rjmp	.-60     	; 0x292 <main+0xa0>
                break;
            }
        }

        else USART_transmit(ERROR_BAD_FRAME);
 2ce:	c5 01       	movw	r24, r10
 2d0:	c3 de       	rcall	.-634    	; 0x58 <USART_transmit>
 2d2:	86 01       	movw	r16, r12
 2d4:	de cf       	rjmp	.-68     	; 0x292 <main+0xa0>

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
